-- =================================================================
-- 生成历史测试数据 (为现有设备生成7天的历史遥测数据)
-- 目标：让图表功能立即可用，展示真实的历史数据趋势
-- =================================================================

-- 清空历史数据表（如果需要重新生成）
-- TRUNCATE TABLE ah_telemetry_history;
-- TRUNCATE TABLE ah_location_history;

-- 为现有设备生成历史数据
-- -----------------------------------------------------------------

-- 1. 为瘤胃胶囊设备生成体温历史数据 (过去7天，每2小时一条)
INSERT INTO ah_telemetry_history (id, device_id, telemetry_key, telemetry_value, unit, timestamp) 
SELECT 
    UUID() as id,
    d.id as device_id,
    'temperature' as telemetry_key,
    ROUND(37 + RAND() * 5, 2) as telemetry_value,  -- 37-42℃
    '℃' as unit,
    DATE_SUB(NOW(), INTERVAL n.num * 2 HOUR) as timestamp
FROM ah_device d
CROSS JOIN (
    SELECT 0 as num UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION
    SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION
    SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24 UNION SELECT 25 UNION SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION
    SELECT 30 UNION SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION SELECT 36 UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION
    SELECT 40 UNION SELECT 41 UNION SELECT 42 UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION SELECT 46 UNION SELECT 47 UNION SELECT 48 UNION SELECT 49 UNION
    SELECT 50 UNION SELECT 51 UNION SELECT 52 UNION SELECT 53 UNION SELECT 54 UNION SELECT 55 UNION SELECT 56 UNION SELECT 57 UNION SELECT 58 UNION SELECT 59 UNION
    SELECT 60 UNION SELECT 61 UNION SELECT 62 UNION SELECT 63 UNION SELECT 64 UNION SELECT 65 UNION SELECT 66 UNION SELECT 67 UNION SELECT 68 UNION SELECT 69 UNION
    SELECT 70 UNION SELECT 71 UNION SELECT 72 UNION SELECT 73 UNION SELECT 74 UNION SELECT 75 UNION SELECT 76 UNION SELECT 77 UNION SELECT 78 UNION SELECT 79 UNION
    SELECT 80 UNION SELECT 81 UNION SELECT 82 UNION SELECT 83
) n
WHERE d.device_type = 'CAPSULE' AND d.status IN ('ACTIVE', 'IDLE');

-- 2. 为瘤胃胶囊设备生成活动量历史数据
INSERT INTO ah_telemetry_history (id, device_id, telemetry_key, telemetry_value, unit, timestamp) 
SELECT 
    UUID() as id,
    d.id as device_id,
    'activity' as telemetry_key,
    FLOOR(RAND() * 12000) as telemetry_value,  -- 0-12000次/小时
    '次/小时' as unit,
    DATE_SUB(NOW(), INTERVAL n.num * 2 HOUR) as timestamp
FROM ah_device d
CROSS JOIN (
    SELECT 0 as num UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION
    SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION
    SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24 UNION SELECT 25 UNION SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION
    SELECT 30 UNION SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION SELECT 36 UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION
    SELECT 40 UNION SELECT 41 UNION SELECT 42 UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION SELECT 46 UNION SELECT 47 UNION SELECT 48 UNION SELECT 49 UNION
    SELECT 50 UNION SELECT 51 UNION SELECT 52 UNION SELECT 53 UNION SELECT 54 UNION SELECT 55 UNION SELECT 56 UNION SELECT 57 UNION SELECT 58 UNION SELECT 59 UNION
    SELECT 60 UNION SELECT 61 UNION SELECT 62 UNION SELECT 63 UNION SELECT 64 UNION SELECT 65 UNION SELECT 66 UNION SELECT 67 UNION SELECT 68 UNION SELECT 69 UNION
    SELECT 70 UNION SELECT 71 UNION SELECT 72 UNION SELECT 73 UNION SELECT 74 UNION SELECT 75 UNION SELECT 76 UNION SELECT 77 UNION SELECT 78 UNION SELECT 79 UNION
    SELECT 80 UNION SELECT 81 UNION SELECT 82 UNION SELECT 83
) n
WHERE d.device_type = 'CAPSULE' AND d.status IN ('ACTIVE', 'IDLE');

-- 3. 为瘤胃胶囊设备生成pH值历史数据
INSERT INTO ah_telemetry_history (id, device_id, telemetry_key, telemetry_value, unit, timestamp) 
SELECT 
    UUID() as id,
    d.id as device_id,
    'ph' as telemetry_key,
    ROUND(5.5 + RAND() * 2, 2) as telemetry_value,  -- 5.5-7.5 pH
    'pH' as unit,
    DATE_SUB(NOW(), INTERVAL n.num * 2 HOUR) as timestamp
FROM ah_device d
CROSS JOIN (
    SELECT 0 as num UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION
    SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION
    SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24 UNION SELECT 25 UNION SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION
    SELECT 30 UNION SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION SELECT 36 UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION
    SELECT 40 UNION SELECT 41 UNION SELECT 42 UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION SELECT 46 UNION SELECT 47 UNION SELECT 48 UNION SELECT 49 UNION
    SELECT 50 UNION SELECT 51 UNION SELECT 52 UNION SELECT 53 UNION SELECT 54 UNION SELECT 55 UNION SELECT 56 UNION SELECT 57 UNION SELECT 58 UNION SELECT 59 UNION
    SELECT 60 UNION SELECT 61 UNION SELECT 62 UNION SELECT 63 UNION SELECT 64 UNION SELECT 65 UNION SELECT 66 UNION SELECT 67 UNION SELECT 68 UNION SELECT 69 UNION
    SELECT 70 UNION SELECT 71 UNION SELECT 72 UNION SELECT 73 UNION SELECT 74 UNION SELECT 75 UNION SELECT 76 UNION SELECT 77 UNION SELECT 78 UNION SELECT 79 UNION
    SELECT 80 UNION SELECT 81 UNION SELECT 82 UNION SELECT 83
) n
WHERE d.device_type = 'CAPSULE' AND d.status IN ('ACTIVE', 'IDLE');

-- 4. 为追踪器设备生成步数历史数据
INSERT INTO ah_telemetry_history (id, device_id, telemetry_key, telemetry_value, unit, timestamp) 
SELECT 
    UUID() as id,
    d.id as device_id,
    'steps' as telemetry_key,
    FLOOR(RAND() * 2000) as telemetry_value,  -- 0-2000步/小时
    '步/小时' as unit,
    DATE_SUB(NOW(), INTERVAL n.num * 2 HOUR) as timestamp
FROM ah_device d
CROSS JOIN (
    SELECT 0 as num UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION
    SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION
    SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24 UNION SELECT 25 UNION SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION
    SELECT 30 UNION SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION SELECT 36 UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION
    SELECT 40 UNION SELECT 41 UNION SELECT 42 UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION SELECT 46 UNION SELECT 47 UNION SELECT 48 UNION SELECT 49 UNION
    SELECT 50 UNION SELECT 51 UNION SELECT 52 UNION SELECT 53 UNION SELECT 54 UNION SELECT 55 UNION SELECT 56 UNION SELECT 57 UNION SELECT 58 UNION SELECT 59 UNION
    SELECT 60 UNION SELECT 61 UNION SELECT 62 UNION SELECT 63 UNION SELECT 64 UNION SELECT 65 UNION SELECT 66 UNION SELECT 67 UNION SELECT 68 UNION SELECT 69 UNION
    SELECT 70 UNION SELECT 71 UNION SELECT 72 UNION SELECT 73 UNION SELECT 74 UNION SELECT 75 UNION SELECT 76 UNION SELECT 77 UNION SELECT 78 UNION SELECT 79 UNION
    SELECT 80 UNION SELECT 81 UNION SELECT 82 UNION SELECT 83
) n
WHERE d.device_type = 'TRACKER' AND d.status IN ('ACTIVE', 'IDLE');

-- 5. 为所有设备生成电量历史数据（逐渐衰减）
INSERT INTO ah_telemetry_history (id, device_id, telemetry_key, telemetry_value, unit, timestamp) 
SELECT 
    UUID() as id,
    d.id as device_id,
    'battery' as telemetry_key,
    GREATEST(5, 100 - (n.num * 0.5)) as telemetry_value,  -- 从100%逐渐衰减，最低5%
    '%' as unit,
    DATE_SUB(NOW(), INTERVAL n.num * 2 HOUR) as timestamp
FROM ah_device d
CROSS JOIN (
    SELECT 0 as num UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION
    SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION
    SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24 UNION SELECT 25 UNION SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION
    SELECT 30 UNION SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION SELECT 36 UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION
    SELECT 40 UNION SELECT 41 UNION SELECT 42 UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION SELECT 46 UNION SELECT 47 UNION SELECT 48 UNION SELECT 49 UNION
    SELECT 50 UNION SELECT 51 UNION SELECT 52 UNION SELECT 53 UNION SELECT 54 UNION SELECT 55 UNION SELECT 56 UNION SELECT 57 UNION SELECT 58 UNION SELECT 59 UNION
    SELECT 60 UNION SELECT 61 UNION SELECT 62 UNION SELECT 63 UNION SELECT 64 UNION SELECT 65 UNION SELECT 66 UNION SELECT 67 UNION SELECT 68 UNION SELECT 69 UNION
    SELECT 70 UNION SELECT 71 UNION SELECT 72 UNION SELECT 73 UNION SELECT 74 UNION SELECT 75 UNION SELECT 76 UNION SELECT 77 UNION SELECT 78 UNION SELECT 79 UNION
    SELECT 80 UNION SELECT 81 UNION SELECT 82 UNION SELECT 83
) n
WHERE d.status IN ('ACTIVE', 'IDLE');

-- 6. 为所有设备生成信号强度历史数据
INSERT INTO ah_telemetry_history (id, device_id, telemetry_key, telemetry_value, unit, timestamp) 
SELECT 
    UUID() as id,
    d.id as device_id,
    'rssi' as telemetry_key,
    -60 - FLOOR(RAND() * 40) as telemetry_value,  -- -60到-100 dBm
    'dBm' as unit,
    DATE_SUB(NOW(), INTERVAL n.num * 2 HOUR) as timestamp
FROM ah_device d
CROSS JOIN (
    SELECT 0 as num UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION
    SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION
    SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24 UNION SELECT 25 UNION SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION
    SELECT 30 UNION SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION SELECT 36 UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION
    SELECT 40 UNION SELECT 41 UNION SELECT 42 UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION SELECT 46 UNION SELECT 47 UNION SELECT 48 UNION SELECT 49 UNION
    SELECT 50 UNION SELECT 51 UNION SELECT 52 UNION SELECT 53 UNION SELECT 54 UNION SELECT 55 UNION SELECT 56 UNION SELECT 57 UNION SELECT 58 UNION SELECT 59 UNION
    SELECT 60 UNION SELECT 61 UNION SELECT 62 UNION SELECT 63 UNION SELECT 64 UNION SELECT 65 UNION SELECT 66 UNION SELECT 67 UNION SELECT 68 UNION SELECT 69 UNION
    SELECT 70 UNION SELECT 71 UNION SELECT 72 UNION SELECT 73 UNION SELECT 74 UNION SELECT 75 UNION SELECT 76 UNION SELECT 77 UNION SELECT 78 UNION SELECT 79 UNION
    SELECT 80 UNION SELECT 81 UNION SELECT 82 UNION SELECT 83
) n
WHERE d.status IN ('ACTIVE', 'IDLE');

-- 7. 为追踪器设备生成GPS位置历史数据
INSERT INTO ah_location_history (id, device_id, longitude, latitude, accuracy, timestamp) 
SELECT 
    UUID() as id,
    d.id as device_id,
    119.758 + ((RAND() - 0.5) * 0.01) as longitude,  -- 围绕基准点随机移动
    49.217 + ((RAND() - 0.5) * 0.01) as latitude,   -- ±0.01度约等于±1公里
    5 + (RAND() * 10) as accuracy,  -- GPS精度5-15米
    DATE_SUB(NOW(), INTERVAL n.num * 2 HOUR) as timestamp
FROM ah_device d
CROSS JOIN (
    SELECT 0 as num UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION
    SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION
    SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24 UNION SELECT 25 UNION SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION
    SELECT 30 UNION SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION SELECT 36 UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION
    SELECT 40 UNION SELECT 41 UNION SELECT 42 UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION SELECT 46 UNION SELECT 47 UNION SELECT 48 UNION SELECT 49 UNION
    SELECT 50 UNION SELECT 51 UNION SELECT 52 UNION SELECT 53 UNION SELECT 54 UNION SELECT 55 UNION SELECT 56 UNION SELECT 57 UNION SELECT 58 UNION SELECT 59 UNION
    SELECT 60 UNION SELECT 61 UNION SELECT 62 UNION SELECT 63 UNION SELECT 64 UNION SELECT 65 UNION SELECT 66 UNION SELECT 67 UNION SELECT 68 UNION SELECT 69 UNION
    SELECT 70 UNION SELECT 71 UNION SELECT 72 UNION SELECT 73 UNION SELECT 74 UNION SELECT 75 UNION SELECT 76 UNION SELECT 77 UNION SELECT 78 UNION SELECT 79 UNION
    SELECT 80 UNION SELECT 81 UNION SELECT 82 UNION SELECT 83
) n
WHERE d.device_type = 'TRACKER' AND d.status IN ('ACTIVE', 'IDLE');

-- =================================================================
-- 验证生成的数据
-- =================================================================

-- 查询生成的数据统计
SELECT '=== 历史数据生成完成 ===' as info;

SELECT 
    '遥测历史数据统计' as category,
    telemetry_key,
    COUNT(*) as record_count,
    MIN(timestamp) as earliest_time,
    MAX(timestamp) as latest_time
FROM ah_telemetry_history 
GROUP BY telemetry_key
ORDER BY telemetry_key;

SELECT 
    '位置历史数据统计' as category,
    'location' as data_type,
    COUNT(*) as record_count,
    MIN(timestamp) as earliest_time,
    MAX(timestamp) as latest_time
FROM ah_location_history;

-- 查询每个设备的数据量
SELECT 
    d.name as device_name,
    d.device_type,
    COUNT(th.id) as telemetry_records,
    COALESCE(lh.location_records, 0) as location_records
FROM ah_device d
LEFT JOIN ah_telemetry_history th ON d.id = th.device_id
LEFT JOIN (
    SELECT device_id, COUNT(*) as location_records 
    FROM ah_location_history 
    GROUP BY device_id
) lh ON d.id = lh.device_id
WHERE d.status IN ('ACTIVE', 'IDLE')
GROUP BY d.id, d.name, d.device_type
ORDER BY d.device_type, d.name; 