{
  "ruleChain": {
    "name": "胶囊-BC100-规则链-v1",
    "type": "CORE",
    "firstRuleNodeId": "设备档案节点",
    "root": true,
    "debugMode": true,
    "configuration": null,
    "additionalInfo": {
      "description": "胶囊BC-100设备的数据处理规则链，负责解析温度、胃动力、加速度等传感器数据"
    }
  },
  "metadata": {
    "version": 7,
    "firstNodeIndex": 5,
    "nodes": [
      {
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode",
        "name": "保存时序数据",
        "debugMode": true,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "defaultTTL": 0,
          "skipLatestPersistence": null,
          "useServerTs": true
        },
        "additionalInfo": {
          "description": "保存胶囊传感器数据到时序数据库",
          "layoutX": 1114,
          "layoutY": 432
        }
      },
      {
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode",
        "name": "保存客户端属性",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 2,
        "configuration": {
          "scope": "CLIENT_SCOPE",
          "notifyDevice": false,
          "sendAttributesUpdatedNotification": false,
          "updateAttributesOnlyOnValueChange": true
        },
        "additionalInfo": {
          "description": "保存胶囊设备状态和传感器状态",
          "layoutX": 333,
          "layoutY": 111
        }
      },
      {
        "type": "org.thingsboard.rule.engine.filter.TbMsgTypeSwitchNode",
        "name": "消息类型切换",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "version": 0
        },
        "additionalInfo": {
          "description": "根据消息类型分发到不同的处理节点",
          "layoutX": 191,
          "layoutY": 441
        }
      },
      {
        "type": "org.thingsboard.rule.engine.action.TbLogNode",
        "name": "记录RPC请求",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "TBEL",
          "jsScript": "return '\\nIncoming message:\\n' + JSON.stringify(msg) + '\\nIncoming metadata:\\n' + JSON.stringify(metadata);",
          "tbelScript": "return '\\nIncoming message:\\n' + JSON.stringify(msg) + '\\nIncoming metadata:\\n' + JSON.stringify(metadata);"
        },
        "additionalInfo": {
          "layoutX": 384,
          "layoutY": 777
        }
      },
      {
        "type": "org.thingsboard.rule.engine.action.TbLogNode",
        "name": "记录其他消息",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "TBEL",
          "jsScript": "return '\\nIncoming message:\\n' + JSON.stringify(msg) + '\\nIncoming metadata:\\n' + JSON.stringify(metadata);",
          "tbelScript": "return '\\nIncoming message:\\n' + JSON.stringify(msg) + '\\nIncoming metadata:\\n' + JSON.stringify(metadata);"
        },
        "additionalInfo": {
          "layoutX": 148,
          "layoutY": 779
        }
      },
      {
        "type": "org.thingsboard.rule.engine.profile.TbDeviceProfileNode",
        "name": "设备档案节点",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 1,
        "configuration": {
          "persistAlarmRulesState": false,
          "fetchAlarmRulesStateOnStart": false
        },
        "additionalInfo": {
          "description": "使用设备档案中定义的告警规则处理传入消息，并将所有传入消息以Success关系类型分发",
          "layoutX": 129,
          "layoutY": 339
        }
      },
      {
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "胶囊解码器",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "/**\r\n * 胶囊BC-100数据解析\r\n * @param {string} bytes 设备上报的字节数组\r\n * @returns \r\n */\r\nfunction easy_decode(bytes) {\r\n    var decoded = {};\r\n\r\n    if (bytes[0] == 0xF2) {\r\n        decoded.Temperature = readInt16LE(bytes.slice(1, 3)) / 100;\r\n        decoded.Gastric_momentum = readUInt32LE(bytes.slice(3, 7));\r\n        decoded.acc_x = readInt8LE(bytes.slice(7, 8));\r\n        decoded.acc_y = readInt8LE(bytes.slice(8, 9));\r\n        decoded.acc_z = readInt8LE(bytes.slice(9, 10));\r\n        decoded.Bat = readUInt8LE(bytes.slice(10, 11));\r\n        //decoded.PH=readUInt8LE(bytes.slice(11,12))/10;\r\n    }\r\n    else if (bytes[0] >= 0xC1 && bytes[0] <= 0xC6) {\r\n        let uint = (1 << ((bytes[0] & 0x0F) - 1) )/ 127.0\r\n        if(bytes[0] == 0xC5){\r\n            uint = 20 /127\r\n        }else if(bytes[0] == 0xC6){\r\n            uint = 40 /127\r\n        }\r\n        var sensorStatus = bytes[1]\r\n\r\n        if ((sensorStatus >> 7) & 0x01) {\r\n            decoded.sensorStatus = \"Reboot\";\r\n        }\r\n\r\n        if ((sensorStatus >> 4) & 0x01) {\r\n            decoded.sensorStatus = \"ACC XYZ Same\";\r\n        }\r\n\r\n        if ((sensorStatus >> 3) & 0x01) {\r\n            decoded.sensorStatus = \"ACC Init Fail\";\r\n        }\r\n\r\n        if ((sensorStatus >> 2) & 0x01) {\r\n            decoded.sensorStatus = \"Temperature unusual\";\r\n        }\r\n\r\n        if ((sensorStatus >> 1) & 0x01) {\r\n            decoded.sensorStatus = \"CRC ERROR\";\r\n        }\r\n\r\n        if ((sensorStatus) & 0x01) {\r\n            decoded.sensorStatus = \"NO ACK\";\r\n        }\r\n\r\n        var value = readInt12LE(bytes.slice(2, 4))\r\n        let temperature = (value * 3100.0 / 2048.0 + 4000) / 100.0 - 0.4 + 0.005;\r\n        decoded.Temperature = parseFloat(temperature.toFixed(2));\r\n\r\n        value =  readInt8LE(bytes[4]) * uint + decoded.Temperature\r\n        decoded.Temperature_1 = parseFloat(value.toFixed(2));\r\n\r\n        value = readInt8LE(bytes[5]) * uint + decoded.Temperature_1\r\n        decoded.Temperature_2 = parseFloat(value.toFixed(2));\r\n\r\n        value = readInt8LE(bytes[6]) * uint + decoded.Temperature_2\r\n        decoded.Temperature_3 = parseFloat(value.toFixed(2));\r\n\r\n        value = readInt8LE(bytes[7]) * uint + decoded.Temperature_3\r\n        decoded.Temperature_4 = parseFloat(value.toFixed(2));\r\n\r\n        value = readInt8LE(bytes[8]) * uint + decoded.Temperature_4\r\n        decoded.Temperature_5 = parseFloat(value.toFixed(2));\r\n\r\n        value = readInt8LE(bytes[9]) * uint + decoded.Temperature_5\r\n        decoded.Temperature_6 = parseFloat(value.toFixed(2));\r\n\r\n        decoded.Gastric_momentum = readUInt32LE(bytes.slice(10, 14));\r\n    }\r\n    return decoded;\r\n}\r\n\r\n/* ******************************************\r\n * bytes to number\r\n ********************************************/\r\nfunction readUInt8LE(byte) {\r\n    return (byte & 0xFF);\r\n}\r\n\r\nfunction readInt8LE(byte) {\r\n    var ref = readUInt8LE(byte);\r\n    return (ref > 0x7F) ? ref - 0x100 : ref;\r\n}\r\n\r\nfunction readInt12LE(byte) {\r\n    var ref = readUInt16LE(byte) & 0xFFF;\r\n    return (ref > 0x7FF) ? ref - 0x1000 : ref;\r\n}\r\n\r\nfunction readUInt16LE(byte) {\r\n    var value = (byte[0] << 8) + byte[1];\r\n    return (value & 0xFFFF);\r\n}\r\n\r\nfunction readInt16LE(byte) {\r\n    var ref = readUInt16LE(byte);\r\n    return (ref > 0x7FFF) ? ref - 0x10000 : ref;\r\n}\r\n\r\nfunction readUInt32LE(byte) {\r\n    var value = (byte[0] << 24) + (byte[1] << 16) + (byte[2] << 8) + byte[3];\r\n    return (value & 0xFFFFFFFF);\r\n}\r\n\r\nfunction readInt32LE(byte) {\r\n    var ref = readUInt32LE(byte);\r\n    return (ref > 0x7FFFFFFF) ? ref - 0x100000000 : ref;\r\n}\r\n\r\nfunction base64decode(e) {\r\n    var r, a, c, h, o, t, d, base64DecodeChars = new Array((- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), 62, (- 1), (- 1), (- 1), 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, (- 1), (- 1), (- 1), (- 1), (- 1), (- 1), 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, (- 1), (- 1), (- 1), (- 1), (- 1));\r\n    for (t = e.length, o = 0, d = ''; o < t;) {\r\n        do {\r\n            r = base64DecodeChars[255 & e.charCodeAt(o++)];\r\n        } while (o < t && r == -1);\r\n        if (r == -1) {\r\n            break;\r\n        }\r\n        do {\r\n            a = base64DecodeChars[255 & e.charCodeAt(o++)];\r\n        } while (o < t && a == -1);\r\n        if (a == -1) {\r\n            break;\r\n        }\r\n        d += String.fromCharCode(r << 2 | (48 & a) >> 4);\r\n        do {\r\n            if (c = 255 & e.charCodeAt(o++), 61 == c) {\r\n                return d;\r\n            }\r\n            c = base64DecodeChars[c];\r\n        } while (o < t && c == - 1);\r\n        if (c == -1) {\r\n            break;\r\n        }\r\n        d += String.fromCharCode((15 & a) << 4 | (60 & c) >> 2);\r\n        do {\r\n            if (h = 255 & e.charCodeAt(o++), 61 == h) {\r\n                return d;\r\n            }\r\n            h = base64DecodeChars[h];\r\n        } while (o < t && c == - 1);\r\n        if (h == -1) {\r\n            break;\r\n        }\r\n        d += String.fromCharCode((3 & c) << 6 | h)\r\n    }\r\n    return d\r\n}\r\n\r\nfunction base64ToHex(str) {\r\n    var bin = base64decode(str.replace(/[ \\r\\n]+$/, \"\"));\r\n    var bytes = [];\r\n    for (var i = 0; i < bin.length; ++i) {\r\n        bytes[i] = bin.charCodeAt(i);\r\n    }\r\n    return bytes;\r\n}\r\n\r\n// 十六进制字符串转字节数组\r\nfunction hexToBytes(hex) {\r\n    // 移除空格和其他非十六进制字符\r\n    hex = hex.replace(/[^0-9A-Fa-f]/g, '');\r\n    var bytes = [];\r\n    for (var i = 0; i < hex.length; i += 2) {\r\n        bytes.push(parseInt(hex.substr(i, 2), 16));\r\n    }\r\n    return bytes;\r\n}\r\n\r\n// 检测数据格式并解析\r\nvar bytes = [];\r\nif (msg.data) {\r\n    // 检查是否为十六进制格式（包含空格的十六进制字符串）\r\n    if (typeof msg.data === 'string' && /^[0-9A-Fa-f\\s]+$/.test(msg.data)) {\r\n        bytes = hexToBytes(msg.data);\r\n    } else {\r\n        // 假设是Base64格式\r\n        bytes = base64ToHex(msg.data);\r\n    }\r\n    \r\n    var result = easy_decode(bytes);\r\n    msg['result'] = result;\r\n    msg['originalData'] = msg.data;\r\n    msg['parsedHex'] = bytes.map(b => b.toString(16).padStart(2, '0')).join(' ').toUpperCase();\r\n}\r\n\r\nreturn { msg: msg, metadata: metadata, msgType: msgType };",
          "tbelScript": "return {msg: msg, metadata: metadata, msgType: msgType};"
        },
        "additionalInfo": {
          "description": "解析胶囊BC-100的LoRaWAN上报数据",
          "layoutX": 587,
          "layoutY": 334
        }
      },
      {
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "构建LoRaWAN下发参数",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "function toObj(obj) {\n    if (!(obj instanceof Object)) {\n        obj = JSON.parse(obj);\n    }\n    return obj;\n}\n\n// 胶囊设备的编码器比较简单，目前只返回空数组\nvar request = {\n    \"type\": \"HEX\",\n    \"fport\": 10,\n    \"confirmed\": false,\n    \"payload\": msg.cmd || \"\"\n};\n\nmsg.params = request;\n\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};",
          "tbelScript": "return {msg: msg, metadata: metadata, msgType: msgType};"
        },
        "additionalInfo": {
          "description": "构建LoRaWAN下发指令参数",
          "layoutX": 645,
          "layoutY": 690
        }
      },
      {
        "type": "org.thingsboard.rule.engine.flow.TbRuleChainInputNode",
        "name": "LoRaWAN网关",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 1,
        "configuration": {
          "forwardMsgToDefaultRuleChain": false,
          "ruleChainId": "4b7bc460-e907-11ef-a8ee-99a8c68f9649"
        },
        "additionalInfo": {
          "description": "转发到LoRaWAN网关规则链",
          "layoutX": 647,
          "layoutY": 776
        }
      },
      {
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Base64转字节",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "// 该节点在胶囊解码器中已经处理了Base64转换，这里主要是保持与车位锁规则链的一致性\nreturn {msg: msg, metadata: metadata, msgType: msgType};",
          "tbelScript": "return {msg: msg, metadata: metadata, msgType: msgType};"
        },
        "additionalInfo": {
          "description": "Base64数据转换处理",
          "layoutX": 586,
          "layoutY": 245
        }
      },
      {
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "胶囊编码器",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "/**\r\n * 胶囊BC-100编码器\r\n * 目前胶囊设备的编码器功能简单，主要用于下发配置参数\r\n */\r\nfunction encodeDownLink(json) {\r\n    // 胶囊设备编码器返回空数组，实际应用中可扩展\r\n    return \"\";\r\n}\r\n\r\n//指令编码\r\nif (msg.method) {\r\n    msg.cmd = encodeDownLink(msg);\r\n}\r\n\r\nreturn { msg: msg, metadata: metadata, msgType: msgType };",
          "tbelScript": "return {msg: msg, metadata: metadata, msgType: msgType};"
        },
        "additionalInfo": {
          "description": "胶囊设备下发指令编码",
          "layoutX": 643,
          "layoutY": 603
        }
      },
      {
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "构建Kafka消息推送数据",
        "debugMode": true,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "msg['deviceName'] = metadata.deviceName;\nmsg['data'] = msg.result;\nmsg['ts'] = metadata.ts;\ndelete msg.timestamp;\ndelete msg.result;\nreturn {msg: msg, metadata: metadata, msgType: msgType};",
          "tbelScript": "return {msg: {deviceName: metadata.deviceName, ts: metadata.ts, data: msg.result, base64Data: msg.data}, metadata: metadata, msgType: msgType};"
        },
        "additionalInfo": {
          "description": "构建胶囊数据的Kafka推送消息",
          "layoutX": 1112,
          "layoutY": 250
        }
      },
      {
        "type": "org.thingsboard.rule.engine.metadata.TbGetTenantDetailsNode",
        "name": "添加租户ID",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 1,
        "configuration": {
          "detailsList": [
            "ID"
          ],
          "fetchTo": "METADATA"
        },
        "additionalInfo": {
          "description": "获取租户ID信息",
          "layoutX": 1109,
          "layoutY": 160
        }
      },
      {
        "type": "org.thingsboard.rule.engine.kafka.TbKafkaNode",
        "name": "胶囊数据推送",
        "debugMode": true,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "topicPattern": "capsule_telemetry_${tenant_id}",
          "keyPattern": null,
          "bootstrapServers": "172.22.3.102:9092,172.22.3.102:9093",
          "retries": 0,
          "batchSize": 16384,
          "linger": 0,
          "bufferMemory": 33554432,
          "acks": "-1",
          "keySerializer": "org.apache.kafka.common.serialization.StringSerializer",
          "valueSerializer": "org.apache.kafka.common.serialization.StringSerializer",
          "otherProperties": {},
          "addMetadataKeyValuesAsKafkaHeaders": false,
          "kafkaHeadersCharset": "UTF-8"
        },
        "additionalInfo": {
          "description": "推送胶囊遥测数据到Kafka",
          "layoutX": 1108,
          "layoutY": 71
        }
      },
      {
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "过滤无效数据包",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "return !!msg.result && (!!msg.result.Temperature || !!msg.result.Gastric_momentum);",
          "tbelScript": "return !!msg.result && (!!msg.result.Temperature || !!msg.result.Gastric_momentum);"
        },
        "additionalInfo": {
          "description": "过滤掉无效的胶囊数据包",
          "layoutX": 1114,
          "layoutY": 337
        }
      },
      {
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "转换消息体",
        "debugMode": true,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "if (msg.body) {\n    var body = JSON.parse(msg.body.replace(/'/g, '\"').replace(/\"True\"/, \"true\").replace('None', null));\n    msg = Object.assign(body, msg);\n    delete msg.body;\n}\nreturn {\n    msg: msg,\n    metadata: metadata,\n    msgType: msgType\n};",
          "tbelScript": "return {msg: msg, metadata: metadata, msgType: msgType};"
        },
        "additionalInfo": {
          "description": "处理消息体格式转换",
          "layoutX": 587,
          "layoutY": 429
        }
      },
      {
        "type": "org.thingsboard.rule.engine.kafka.TbKafkaNode",
        "name": "胶囊设备创建事件通知",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "topicPattern": "create_capsule_${tenant_id}",
          "keyPattern": null,
          "bootstrapServers": "172.22.3.102:9092,172.22.3.102:9093",
          "retries": 0,
          "batchSize": 16384,
          "linger": 0,
          "bufferMemory": 33554432,
          "acks": "-1",
          "keySerializer": "org.apache.kafka.common.serialization.StringSerializer",
          "valueSerializer": "org.apache.kafka.common.serialization.StringSerializer",
          "otherProperties": {},
          "addMetadataKeyValuesAsKafkaHeaders": false,
          "kafkaHeadersCharset": "UTF-8"
        },
        "additionalInfo": {
          "description": "通知胶囊设备创建事件",
          "layoutX": 812,
          "layoutY": 172
        }
      },
      {
        "type": "org.thingsboard.rule.engine.metadata.TbGetTenantDetailsNode",
        "name": "添加租户ID",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 1,
        "configuration": {
          "detailsList": [
            "ID"
          ],
          "fetchTo": "METADATA"
        },
        "additionalInfo": {
          "description": "获取租户ID用于设备创建事件",
          "layoutX": 543,
          "layoutY": 168
        }
      },
      {
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "提取解析结果作为遥测数据",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "TBEL",
          "jsScript": "return {msg: msg, metadata: metadata, msgType: msgType};",
          "tbelScript": "return {msg: msg.result, metadata: metadata, msgType: msgType};"
        },
        "additionalInfo": {
          "description": "提取胶囊解析结果作为遥测数据",
          "layoutX": 1016,
          "layoutY": 610
        }
      },
      {
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "温度异常告警过滤",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "// 检查温度是否异常\nif (msg.result && msg.result.Temperature) {\n    // 正常体温范围 36-42°C\n    var temp = msg.result.Temperature;\n    return temp < 36 || temp > 42;\n}\nreturn false;",
          "tbelScript": "return msg.result && msg.result.Temperature && (msg.result.Temperature < 36 || msg.result.Temperature > 42);"
        },
        "additionalInfo": {
          "description": "过滤温度异常的数据用于告警",
          "layoutX": 850,
          "layoutY": 430
        }
      },
      {
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "创建温度异常告警",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 1,
        "configuration": {
          "alarmType": "Temperature Abnormal",
          "severity": "WARNING",
          "propagate": false,
          "useMessageAlarmData": false,
          "overwriteAlarmDetails": true,
          "alarmDetailsBuildJs": "var details = {};\nif (msg.result && msg.result.Temperature) {\n    details.temperature = msg.result.Temperature;\n    details.threshold_min = 36;\n    details.threshold_max = 42;\n    details.deviceName = metadata.deviceName;\n}\nreturn details;",
          "alarmDetailsBuildTbel": "var details = {};\nif (msg.result && msg.result.Temperature) {\n    details.temperature = msg.result.Temperature;\n    details.threshold_min = 36;\n    details.threshold_max = 42;\n    details.deviceName = metadata.deviceName;\n}\nreturn details;"
        },
        "additionalInfo": {
          "description": "当胶囊温度异常时创建告警",
          "layoutX": 850,
          "layoutY": 530
        }
      },
      {
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "传感器状态告警过滤",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "// 检查传感器状态\nif (msg.result && msg.result.sensorStatus) {\n    var status = msg.result.sensorStatus;\n    return status === \"ACC Init Fail\" || status === \"CRC ERROR\" || status === \"Temperature unusual\";\n}\nreturn false;",
          "tbelScript": "return msg.result && msg.result.sensorStatus && (msg.result.sensorStatus == 'ACC Init Fail' || msg.result.sensorStatus == 'CRC ERROR' || msg.result.sensorStatus == 'Temperature unusual');"
        },
        "additionalInfo": {
          "description": "过滤传感器异常状态",
          "layoutX": 850,
          "layoutY": 330
        }
      },
      {
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "创建传感器异常告警",
        "debugMode": false,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 1,
        "configuration": {
          "alarmType": "Sensor Abnormal",
          "severity": "CRITICAL",
          "propagate": false,
          "useMessageAlarmData": false,
          "overwriteAlarmDetails": true,
          "alarmDetailsBuildJs": "var details = {};\nif (msg.result && msg.result.sensorStatus) {\n    details.sensorStatus = msg.result.sensorStatus;\n    details.deviceName = metadata.deviceName;\n}\nreturn details;",
          "alarmDetailsBuildTbel": "var details = {};\nif (msg.result && msg.result.sensorStatus) {\n    details.sensorStatus = msg.result.sensorStatus;\n    details.deviceName = metadata.deviceName;\n}\nreturn details;"
        },
        "additionalInfo": {
          "description": "当传感器状态异常时创建告警",
          "layoutX": 850,
          "layoutY": 630
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 0,
        "toIndex": 12,
        "type": "Success"
      },
      {
        "fromIndex": 2,
        "toIndex": 1,
        "type": "Post attributes"
      },
      {
        "fromIndex": 2,
        "toIndex": 3,
        "type": "RPC Request from Device"
      },
      {
        "fromIndex": 2,
        "toIndex": 4,
        "type": "Other"
      },
      {
        "fromIndex": 2,
        "toIndex": 10,
        "type": "Post telemetry"
      },
      {
        "fromIndex": 2,
        "toIndex": 18,
        "type": "Entity Created"
      },
      {
        "fromIndex": 2,
        "toIndex": 11,
        "type": "RPC Request to Device"
      },
      {
        "fromIndex": 5,
        "toIndex": 2,
        "type": "Success"
      },
      {
        "fromIndex": 6,
        "toIndex": 16,
        "type": "Success"
      },
      {
        "fromIndex": 7,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 10,
        "toIndex": 6,
        "type": "Success"
      },
      {
        "fromIndex": 11,
        "toIndex": 7,
        "type": "Success"
      },
      {
        "fromIndex": 12,
        "toIndex": 13,
        "type": "Success"
      },
      {
        "fromIndex": 13,
        "toIndex": 14,
        "type": "Success"
      },
      {
        "fromIndex": 15,
        "toIndex": 0,
        "type": "True"
      },
      {
        "fromIndex": 15,
        "toIndex": 20,
        "type": "True"
      },
      {
        "fromIndex": 15,
        "toIndex": 22,
        "type": "True"
      },
      {
        "fromIndex": 16,
        "toIndex": 15,
        "type": "Success"
      },
      {
        "fromIndex": 16,
        "toIndex": 20,
        "type": "Success"
      },
      {
        "fromIndex": 16,
        "toIndex": 22,
        "type": "Success"
      },
      {
        "fromIndex": 18,
        "toIndex": 17,
        "type": "Success"
      },
      {
        "fromIndex": 20,
        "toIndex": 21,
        "type": "True"
      },
      {
        "fromIndex": 22,
        "toIndex": 23,
        "type": "True"
      }
    ],
    "ruleChainConnections": null
  }
} 